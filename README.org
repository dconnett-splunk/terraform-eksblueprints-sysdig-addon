* Integration Lab README
* Sysdig Addon for EKS Blueprints

_This project is currently in BETA stage_
** Introduction
[[https://sysdig.com][Sysdig]] is a security and monitoring platform that helps organizations to confidently drive cloud and containers by providing insight from source to run. Sysdig is built on open standards like [[https://falco.org/][Falco]], [[https://www.openpolicyagent.org/][OPA]] and [[https://prometheus.io/][Prometheus]].

This project contains the Sysdig Terraform add-on for [[https://github.com/aws-ia/terraform-aws-eks-blueprints][AWS EKS Blueprints]] as well as a set of prebuilt  blueprints (see /blueprints/) ready to start creating clusters fast and easy.
** EKS add-ons and blueprints
With this Sysdig Addon for EKS Blueprints, you can provision EKS clusters tailored to your needs and secured from day-zero as they are deployed together with the Sysdig agents. This add-on and the blueprints extends the framework AWS EKS Blueprints.

- Getting Started: The Getting Started Blueprint provisions a basic cluster with the most common Sysdig instrumentation for both Secure and Monitor use cases.

- Security Laboratory: The Security Lab Blueprint creates a cluster with an example application to generate suspicious runtime events and vulnerabilities to be detected out of the box by the Sysdig probe that is also installed with this automation.

- Monitor and Alerting: The Monitor and alerting set up a cluster monitored by the sysdig agents and defines Notification Channels and Alerts as code.
** Requirements
- Terraform >= 1.0.0 (Recommended > 1.3.0)
- AWS Command Line and credentials
- A Sysdig account. You can register your [[https://sysdig.com/company/start-free/][Sysdig Free Trial]] and start experimenting on how to secure an EKS cluster now.
** Training
- EKS Blueprints for Terraform official workshop: [[https://catalog.workshops.aws/eks-blueprints-terraform/en-US][https://catalog.workshops.aws/eks-blueprints-terraform/en-US]]
- Sysdig AWS workshops: [[https://sysdig.awsworkshop.io][https://sysdig.awsworkshop.io]]
** Terraform Documentation
<!-- BEGIN_TF_DOCS -->
*** Inputs

| Name                       | Description                                              | Type     | Default | Required |
|----------------------------|----------------------------------------------------------|----------|---------|:--------:|
| addon_context              | Input configuration for the addon                        | object   | n/a     | yes      |
| cluster_name               | Cluster Name                                             | string   | `"testcluster"` | no |
| helm_config                | Helm Configuration for Sysdig Agent                       | any      | `{}`    | no       |
| manage_via_gitops          | Determines if the add-on should be managed via GitOps    | bool     | `false` | no       |
*** Outputs

| Name                       | Description                                              |
|----------------------------|----------------------------------------------------------|
| argocd_gitops_config       | Configuration used for managing the add-on with ArgoCD   |
<!-- END_TF_DOCS -->
* Step By Step Instructions
Navigate to =./terraform-eksblueprints-sysdig-addon/blueprints/getting-started=
Run =terraform init=
Run =terraform plan=

Run =terraform apply=
Run the following script after createing a =secrets.env= file with the required variables defined
** :PROPERTIES:
:id: 63ff72b0-e584-46da-b073-39b9d136c418
:END:
#+BEGIN_SRC sh
#!/bin/bash

source secrets.env

# List of required environment variables
REQUIRED_VARS=(
  CLUSTER_NAME
  SYSDIG_ACCESS_KEY
  STACKROX_ADMIN_PASSWORD
  SPLUNK_O11Y_ACCESS_TOKEN
  SPLUNK_PLATFORM_TOKEN
  SPLUNK_PLATFORM_HEC_URL
  AWS_REGION
  TF_VAR_sysdig_accesskey
  TF_VAR_sysdig_collector_endpoint
  TF_VAR_nodeanalyzer_api_endpoint
  TF_VAR_cluster_name
  TF_VAR_aws_region
)

# Check that all required variables are set
for var in "${REQUIRED_VARS[@


# Check that all required variables are set
for var in "${REQUIRED_VARS[@]}"; do
  if [ -z "${!var}" ]; then
    echo "Error: ${var} environment variable is not set"
    exit 1
  fi
done


helm repo add sysdig https://charts.sysdig.com
helm repo add splunk-otel-collector-chart https://signalfx.github.io/splunk-otel-collector-chart
aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME
helm repo update

# Install AWS EBS Driver
kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=release-1.14"

# OTel Collector -> Doug-Splunk-Instance and O11y w/Network
helm upgrade my-splunk-otel-collector --namespace kube-system \
  --set distribution='eks',cloudProvider='aws' \
  --set='splunkPlatform.endpoint='"$SPLUNK_PLATFORM_HEC_URL" \
  --set='splunkPlatform.token='"$SPLUNK_PLATFORM_TOKEN" \
  --set='splunkPlatform.metricsIndex=k8s-metrics' \
  --set='splunkPlatform.index=sandbox' \
  --set='splunkObservability.realm=us1' \
  --set='splunkObservability.accessToken='"$SPLUNK_O11Y_ACCESS_TOKEN" \
  --set='clusterName='"$CLUSTER_NAME" \
  --set='splunkObservability.logsEnabled=true' \
  --set='splunkObservability.infrastructureMonitoringEventsEnabled=true' \
  --set='networkExplorer.enabled=true' \
  --set='networkExplorer.podSecurityPolicy.enabled=false' \
  --set='agent.enabled=true' \
  --set='clusterReceiver.enabled=true' \
  --set='gateway.replicaCount=1' \
  --set='environment='"$CLUSTER_NAME" \
  --set='gateway.resources.limits.cpu=500m' \
  --set='gateway.resources.limits.memory=1Gi' \
  splunk-otel-collector-chart/splunk-otel-collector

# Install StackRox
helm upgrade --install -n stackrox --create-namespace stackrox-central-services stackrox/stackrox-central-services \
    --set central.adminPassword.value="${STACKROX_ADMIN_PASSWORD}" \
    --set central.persistence.persistentVolumeClaim.createClaim=false \
    --set central.persistence.persistentVolumeClaim.claimName="stackrox-db"

# After Install
# Manually update AWS EFS and possibly EBS Security groups to add to VPC

# Decode StackRox secret and save as file
alias decode-stackrox-secret='kubectl -n stackrox get secret stackrox-generated-xseevw -o go-template="{{ index .data \"generated-values.yaml\" }}" | base64 --decode > generated-values.yaml'

# Get Password for StackRox central services
alias get-stackrox-password='helm -n stackrox get values stackrox-central-services'

# Install Splunk Operator
alias install-splunk-operator='helm install -f default-values.yaml splunk splunk/splunk-operator -n splunk'

# Upgrade Splunk Deployment
alias upgrade-splunk-deployment='helm upgrade -f default-values.yaml --set splunk-operator.enabled=false heavy-forwarder splunk/splunk-enterprise -n splunk'

# Get Splunk Password
alias get-splunk-password='kubectl get secret splunk-splunk-secret -o go-template="{{range $k,$v := .data}}{{printf \"%s: \" $k}}{{if not $v}}{{$v}}{{else}}{{$v | base64decode}}{{end}}{{\"\\n\"}}{{end}}"'

#+END_SRC
